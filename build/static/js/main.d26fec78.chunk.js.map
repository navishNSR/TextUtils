{"version":3,"sources":["components/NavBar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","props","React","createElement","className","style","backgroundColor","fontSize","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","TextForm","text","setText","useState","buttonText","newButtonText","bodyStyle","newBodyStyle","color","width","toggleBtnStyle","newToggleBtnStyle","buttonStyle","newButtonStyle","Fragment","height","onClick","changeMode","heading","value","onChange","event","target","id","rows","toUpperCase","newText","toLowerCase","toCSV","replaceAll","toJSON","charArray","split","i","length","replace","concat","capitalizeText","charAt","slice","trim","clearText","defaultProps","aboutText","App","about","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.d26fec78.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction NavBar(props) {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n      <div className=\"container-fluid\" style={{backgroundColor: 'black'}}>\n        <a className=\"navbar-brand mx-4\" style={{fontSize: '2rem'}}href=\"/\">\n          {props.title}\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\" />\n        </button>\n        {/* <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\n                Home\n              </a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\n                {props.aboutText}\n              </a>\n            </li>\n          </ul>\n        </div> */}\n      </div>\n    </nav>\n  );\n}\n\nexport default NavBar;\n\nNavBar.propTypes = {\n    title: PropTypes.string.isRequired,   // If .isRequired is written it means either we have to send props or we have to set default props.\n    aboutText: PropTypes.string\n}\n\nNavBar.defaultProps = {\n    title: \"Website Title\",\n    aboutText: \"About Text Here\"\n}","import React, { useState } from \"react\";\n\nexport default function TextForm(props) {\n  const [text, setText] = useState(\"\");\n  const [buttonText, newButtonText] = useState(\"Enable Dark Mode\");\n  const [bodyStyle, newBodyStyle] = useState({\n    color: \"black\",\n    backgroundColor: \"white\",\n    width: \"100%\",\n  });\n\n  const [toggleBtnStyle, newToggleBtnStyle] = useState({\n    color: \"white\",\n    backgroundColor: \"#141715\",\n    width: \"30vh\",\n  });\n\n  const [buttonStyle, newButtonStyle] = useState({\n    color: \"White\",\n    backgroundColor: \"#0045ad\",\n    width: \"30vh\",\n  });\n\n  const changeMode = () => {\n    if (bodyStyle.backgroundColor === \"white\") {\n      newBodyStyle({\n        color: \"white\",\n        backgroundColor: \"black\",\n        width: \"100%\",\n      });\n\n      newButtonStyle({\n        color: \"black\",\n        backgroundColor: \"cyan\",\n        width: \"30vh\",\n      });\n\n      newToggleBtnStyle({\n        color: \"#141715\",\n        backgroundColor: \"white\",\n        width: \"30vh\",\n      });\n\n      newButtonText(\"Enable Light Mode\");\n    } else {\n      newBodyStyle({\n        color: \"black\",\n        backgroundColor: \"white\",\n        width: \"100%\",\n      });\n\n      newButtonStyle({\n        color: \"white\",\n        backgroundColor: \"#0045ad\",\n        width: \"30vh\",\n      });\n\n      newToggleBtnStyle({\n        color: \"white\",\n        backgroundColor: \"#141715\",\n        width: \"30vh\",\n      });\n\n      newButtonText(\"Enable Dark Mode\");\n    }\n  };\n\n  const toUpperCase = () => {\n    let newText = text.toUpperCase();\n    setText(newText);\n  };\n\n  const toLowerCase = () => {\n    let newText = text.toLowerCase();\n    setText(newText);\n  };\n\n  const toCSV = () => {\n    let newText = text.replaceAll(\" \", \",\");\n    setText(newText);\n  };\n\n  const toJSON = () => {\n    let charArray = text.split(\" \");\n    let newText = \"{ \\n }\";\n    for (let i = 0; i < charArray.length; i++) {\n      newText = newText.replace(\n        \"\\n\",\n        `\\n\"${charArray[i].toLowerCase()}\" : \"${charArray[i]}\"\\n`\n      );\n    }\n    setText(newText);\n  };\n\n  const clearText = () => {\n    let newText = \"\";\n    setText(newText);\n  };\n\n  const capitalizeText = () => {\n    let charArray = text.split(\" \");\n    let newText = \"\";\n    for (let i = 0; i < charArray.length; i++) {\n      newText +=\n        charArray[i].charAt(0).toUpperCase() +\n        charArray[i].slice(1).toLowerCase() +\n        \" \";\n    }\n    setText(newText.trim());\n  };\n\n  const handleOnChange = (event) => {\n    setText(event.target.value);\n  };\n\n  return (\n    <>\n      <div className=\"main-container\" style={{ ...bodyStyle, height: \"200vh\" }}>\n        <div className=\"toggle-button text-center\" style={bodyStyle}>\n          <button\n            type=\"button\"\n            className=\"btn btn-dark my-4\"\n            style={{ ...toggleBtnStyle }}\n            onClick={changeMode}\n          >\n            {buttonText}\n          </button>\n        </div>\n        <div className=\"container\" style={bodyStyle}>\n          <h1> {props.heading} </h1>\n          <div className=\"mb-3\">\n            <textarea\n              className=\"form-control\"\n              value={text}\n              onChange={handleOnChange}\n              id=\"myBox\"\n              rows=\"8\"\n              style={bodyStyle}\n            ></textarea>\n            <div className=\"btn-container text-center my-3\">\n              <button\n                className=\"btn btn-primary mx-2 my-2\"\n                style={buttonStyle}\n                onClick={toUpperCase}\n              >\n                Change to Upper Case\n              </button>\n              <button\n                className=\"btn btn-primary mx-2 my-2\"\n                style={buttonStyle}\n                onClick={toLowerCase}\n              >\n                Change to Lower Case\n              </button>\n              <button\n                className=\"btn btn-primary mx-2 my-2\"\n                style={buttonStyle}\n                onClick={toCSV}\n              >\n                Change to CSV\n              </button>\n              <button\n                className=\"btn btn-primary mx-2 my-2\"\n                style={buttonStyle}\n                onClick={toJSON}\n              >\n                Change to JSON\n              </button>\n              <button\n                className=\"btn btn-primary mx-2 my-2\"\n                style={buttonStyle}\n                onClick={capitalizeText}\n              >\n                Capitalize Text\n              </button>\n              <button\n                className=\"btn btn-primary mx-2 my-2\"\n                style={buttonStyle}\n                onClick={clearText}\n              >\n                Clear Text\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"container my-2\" style={bodyStyle}>\n          <h1 className=\"my-4\">Your Text Summary</h1>\n          <p className=\"my-3\">\n            {\" \"}\n            {text.split(\" \").length} Words {text.split(\"\").length} Characters\n          </p>\n          <p className=\"my-3\">\n            {\" \"}\n            {0.008 * text.split(\" \").length} minutes it will take to read\n            (Assuming 0.008 minutes per word)\n          </p>\n          <h3 className=\"my-4\">Preview</h3>\n          <p> {text}</p>\n        </div>\n      </div>\n    </>\n  );\n}\n\n// Event Listeners used in this page - onChange, onClick\n","import React from 'react'\nimport NavBar from \"./components/NavBar\";\nimport TextForm from \"./components/TextForm\";\n\nfunction App() {\n  return (\n    // <NavBar/>\n    // <NavBar title=\"TextUtils\" />\n    <>\n      <NavBar title=\"TextUtils\" about=\"About TextUtils\" />\n      <TextForm heading=\"Enter the text to Analyze\" />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}